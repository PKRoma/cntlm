#!/bin/sh
#
# cntlmd: Start/stop the cntlm proxy.
#
# chkconfig:  2345 26 89 
# Description:       Cntlm is meant to be given your proxy address and becomming
#                    the primary proxy then, listening on a selected local port. 
#                    You point all your proxy-aware programs to it and don't ever
#                    have to deal with proxy authentication again.
#
# Authors:           Radislav Vrnata
#                    Michal Strnad
#                    Christian Wittmer
#
### BEGIN INIT INFO
# Provides:          cntlm
# Required-Start:    $syslog $network $time
# Should-Start:      $remote_fs
# Required-Stop:     $syslog $network $time
# Should-Stop:       $remote_fs
# Default-Start:     2 3 5
# Default-Stop:      0 1 6
# Short-Description: start/stop the cntlm proxy
# Description:       ntlm is meant to be given your proxy address and becomming
#                    the primary proxy then, listening on a selected local port. 
#                    You point all your proxy-aware programs to it and don't ever
#                    have to deal with proxy authentication again.
### END INIT INFO
#
# Note on runlevels:
# 0 - halt/poweroff 			6 - reboot
# 1 - single user			2 - multiuser without network exported
# 3 - multiuser w/ network (text mode)  5 - multiuser w/ network and X11 (xdm)
# 

# Determining Linux RedHat/SuSE 
#
# /etc/redhat-release
# /etc/SuSE-release

SuSE=false
RedHat=false

if [ -f /etc/SuSE-release ]; then
	SuSE=true
elif [ -f /etc/redhat-release ]; then
	RedHat=true
else
	echo "Error: your platform is not supported by $0" > /dev/stderr
	exit 1
fi


# Source function library SuSE/RedHat.
if $SuSE; then
	# Source LSB init functions
	# providing start_daemon, killproc, pidofproc, 
	# log_success_msg, log_failure_msg and log_warning_msg.
	# This is currently not used by UnitedLinux based distributions and
	# not needed for init scripts for UnitedLinux only. If it is used,
	# the functions from rc.status should not be sourced or used.
	#. /lib/lsb/init-functions

	# Shell functions sourced from /etc/rc.status:
	#      rc_check         check and set local and overall rc status
	#      rc_status        check and set local and overall rc status
	#      rc_status -v     be verbose in local rc status and clear it afterwards
	#      rc_status -v -r  ditto and clear both the local and overall rc status
	#      rc_status -s     display "skipped" and exit with status 3
	#      rc_status -u     display "unused" and exit with status 3
	#      rc_failed        set local and overall rc status to failed
	#      rc_failed <num>  set local and overall rc status to <num>
	#      rc_reset         clear both the local and overall rc status
	#      rc_exit          exit appropriate to overall rc status
	#      rc_active        checks whether a service is activated by symlinks

	# Return values acc. to LSB for all commands but status:
	# 0	  - success
	# 1       - generic or unspecified error
	# 2       - invalid or excess argument(s)
	# 3       - unimplemented feature (e.g. "reload")
	# 4       - user had insufficient privileges
	# 5       - program is not installed
	# 6       - program is not configured
	# 7       - program is not running
	# 8--199  - reserved (8--99 LSB, 100--149 distrib, 150--199 appl)
	# 
	# Note that starting an already running service, stopping
	# or restarting a not-running service as well as the restart
	# with force-reload (in case signaling is not supported) are
	# considered a success.
    test -f /etc/rc.status && . /etc/rc.status || { 
	echo "Error: your platform is not supported by $0" > /dev/stderr;
    exit 1 
	}
	rc_reset
else
    test -f /etc/init.d/functions && . /etc/init.d/functions || {
	echo "Error: your platform is not supported by $0" > /dev/stderr;
    exit 1
	}
	RETVAL=0
fi    

# Check for existence of needed config file and read it
CNTLM_CONFIG="/etc/cntlm.conf"
test -r $CNTLM_CONFIG || { echo "$CNTLM_CONFIG not existing";
	if [ "$1" = "stop" ]; then exit 0;
	else exit 6; fi; }

# Check for existence of needed sysconfig file and read it
if $SuSE ; then
	CNTLM_SYSCONFIG="/etc/sysconfig/cntlm"
else
	CNTLM_SYSCONFIG="/etc/sysconfig/cntlmd"
fi
test -r $CNTLM_SYSCONFIG && . $CNTLM_SYSCONFIG || { 
	echo "$CNTLM_SYSCONFIG not existing";
	if [ "$1" = "stop" ]; then exit 0;
	else exit 6; fi; }

# some defaults
[ -z "${DAEMON}" ] && DAEMON=/usr/sbin/cntlm
[ -z "${DESC}" ] && DESC="CNTLM Authentication Proxy"
[ -z "${PIDFILE}" ] && PIDFILE="/var/run/cntlm/cntlmd.pid"
if $SuSE ; then
	[ -z "${LOCKFILE}" ] && LOCKFILE="/var/lock/subsys/cntlm"
else
	[ -z "${LOCKFILE}" ] && LOCKFILE="/var/lock/subsys/cntlmd"
fi
[ -z "${RUNAS}" ] && RUNAS="cntlm"

# if no "Proxy" is set in cntlm.conf try '127.0.0.1:3128' as a default
if [ `/bin/cat $CNTLM_CONFIG | grep -e "^Listen" >/dev/null; echo $?` -eq 0 ]; then 
	CNTLM_LISTEN=
else
	CNTLM_LISTEN="-l 127.0.0.1:3128"
fi

# Check for missing binaries (stale symlinks should not happen)
# Note: Special treatment of stop for LSB conformance
test -x $DAEMON || { echo "$DAEMON not installed";
        if [ "$1" = "stop" ]; then exit 0;
		        else exit 5; fi; }

case "$1" in
    start)
	echo -n "Starting ${DESC}: "
	if $SuSE; then
		## Start daemon with startproc(8). If this fails
		## the return value is set appropriately by startproc.
		/sbin/startproc -p $PIDFILE $DAEMON -P $PIDFILE $CNTLM_LISTEN  -U $RUNAS $OPTARGS &>/dev/null

		# Remember status and be verbose
		rc_status -v
	else
		daemon cntlm -P $PIDFILE $CNTLM_LISTEN  -U $RUNAS $OPTARGS 2>/dev/null
		RETVAL=$?
		echo
		[ $RETVAL -eq 0 ] && touch $LOCKFILE
		exit $RETVAL
	fi
	;;
    stop)
	echo -n "Shutting down ${DESC}: "
	if $SuSE; then
		## Stop daemon with killproc(8) and if this fails
		## killproc sets the return value according to LSB.
		/sbin/killproc -p $PIDFILE -TERM $DAEMON &>/dev/null

		# Remember status and be verbose
		rc_status -v
	else 
		killproc cntlm
		RETVAL=$?
		echo
		[ $RETVAL -eq 0 ] && rm -f $LOCKFILE
		exit $RETVAL
	fi
	;;
    try-restart|condrestart)
	## Do a restart only if the service was active before.
	## Note: try-restart is now part of LSB (as of 1.9).
	## RH has a similar command named condrestart.
	if test "$1" = "condrestart"; then
		echo "${attn} Use try-restart ${done}(LSB)${attn} rather than condrestart ${warn}(RH)${norm}"
	fi
	$0 status
	if test $? = 0; then
		$0 restart
	else
		if $SuSE; then
			rc_reset	# Not running is not a failure.
			# Remember status and be quiet
			rc_status
		else
			exit 0
		fi
	fi
	;;
    restart)
	## Stop the service and regardless of whether it was
	## running or not, start it again.
	$0 stop
	$0 start

	if $SuSE; then
		# Remember status and be quiet
		rc_status
	fi
	;;
    force-reload|reload)
	## Signal the daemon to reload its config. Most daemons
	## do this on signal 1 (SIGHUP).
	## If it does not support it, restart the service if it
	## is running.

	# cntlm does not support SIGHUP, so restart
	echo -n "Reload ${DESC}: "
	## if it supports it:
	#/sbin/killproc -p $PIDFILE -HUP $DAEMON

	# Remember status and be verbose
	#rc_status -v

	## Otherwise:
	$0 try-restart

	if $SuSE; then
		# Remember status and be quiet
		rc_status
	fi
	;;
    status)
	echo -n "Checking for ${DESC}: "
	if $SuSE; then
		## Check status with checkproc(8), if process is running
		## checkproc will return with exit status 0.

		# Return value is slightly different for the status command:
		# 0 - service up and running
		# 1 - service dead, but /var/run/  pid  file exists
		# 2 - service dead, but /var/lock/ lock file exists
		# 3 - service not running (unused)
		# 4 - service status unknown :-(
		# 5--199 reserved (5--99 LSB, 100--149 distro, 150--199 appl.)
	
		# NOTE: checkproc returns LSB compliant status values.
		/sbin/checkproc -p $PIDFILE $DAEMON
		# NOTE: rc_status knows that we called this init script with
		# "status" option and adapts its messages accordingly.

		# Remember status and be verbose
		rc_status -v
	else
        	status cntlm
	fi
	;;
    *)
	echo "Usage: $0 {start|stop|status|try-restart|restart|force-reload|reload}"
	exit 1
	;;
esac
if $SuSE; then
	rc_exit
else
	exit $RETVAL
fi
